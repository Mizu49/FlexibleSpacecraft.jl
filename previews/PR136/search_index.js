var documenterSearchIndex = {"docs":
[{"location":"development/developer's-guideline/#Developer's-Guideline","page":"Developer's Guideline","title":"Developer's Guideline","text":"","category":"section"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"We appreciate your contributions to our project! Please read the guideline for developers.","category":"page"},{"location":"development/developer's-guideline/#Branching-Model","page":"Developer's Guideline","title":"Branching Model","text":"","category":"section"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"We employ the following branching model. Please try to follow this!","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"Branch naming Description Branch off from: Merge back into:\nmain Latest stable release with version tag. None None\ndevelop Latest development build. Newly developed features are merged to this branch. main release-**** or main with --no-ff option\ndev-**** Feature development branch. Development of new feature should be on this branch. Contributors are encouraged to use this. development development with no-ff option\nrelease-**** Preparation for next release will be done in this branch. development main and develop with no-ff option\nhotfix-**** Bug fix in main main main and development","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"**** in branch naming is a short description of the development effort in that branch. It should be a lower camel case (e.g. dev-differentialEquation).","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"This branching model is inspired by Vincent Driessen's Branching Model","category":"page"},{"location":"development/developer's-guideline/#Style-Guide","page":"Developer's Guideline","title":"Style Guide","text":"","category":"section"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"Please follow the official style guide of JuliaLang!","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"In addition, we are using the following naming conventions.","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"****2####(): function that returns transformation matrix from **** to ####.  \neg. ECI2BodyFrame() returns transformation matrix from ECI frame to Spacecraft Body Fixed frame.\nC_****2####: variable that has transformation matrix from **** to ####.","category":"page"},{"location":"development/developer's-guideline/#Documentation","page":"Developer's Guideline","title":"Documentation","text":"","category":"section"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"Developers are encouraged to add docstrings in code. Especially when developing a new feature, be sure to explain it in detail and hopefully example code!","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"Documentation page is also good! Direct to /docs/src/ to add new page in the FlexibleSpacecraft.jl Docs!","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"When using the information from external sources (like books and technical articles), be sure to add appropriate reference information. We recommend following the Reference Style and Format of the American Institute of Aeronautics and Astronautics (AIAA).","category":"page"},{"location":"docs-CLI/#Documentation-for-the-CLI","page":"CLI","title":"Documentation for the CLI","text":"","category":"section"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"FlexibleSpacecraft.jl offers a useful CLI tools to accelerate your development of the spacecraft. This documentation illustrates the basic settings and configurations of the CLI tool.","category":"page"},{"location":"docs-CLI/#Pre-process-of-the-simulation-parameters","page":"CLI","title":"Pre-process of the simulation parameters","text":"","category":"section"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"You need a parameter setting file to run simulation from the CLI tool. Visit the Parameter configuration to learn more about the parameter setting format.","category":"page"},{"location":"docs-CLI/#Commands-and-basic-usage","page":"CLI","title":"Commands and basic usage","text":"","category":"section"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"evalspacecraft is the topmost basic CLI command for FlexibleSpacecraft.jl. You need to type the subcommand to specify what you want to do with FlexibleSpacecraft.jl.","category":"page"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"$ evalspacecraft <command>","category":"page"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"Subcommands are listed as follows:","category":"page"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"update: update and rebuild the FlexibleSpacecraft.jl. Recommended to use this subcommand at the first time you use FlexibleSpacecraft.jl\nrun <configfilepath>: run simulation based on the given parameter settings and configurations\nclear: remove package FlexibleSpacecraft.jl","category":"page"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"You can also use the following flags:","category":"page"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"-h, --help: show help\n-V, --version: show version information","category":"page"},{"location":"docs-CLI/#Example","page":"CLI","title":"Example","text":"","category":"section"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"$ evalspacecraft -V","category":"page"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"Suppose you have the parameter setting file spacecraft.yml in your current working directory. You can run simulation with the predefined parameters with following command. ","category":"page"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"$ evalspacecraft run spacecraft.yml --save","category":"page"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"--save is a flag that specifies wheather to save the simulation data or not. False by default.","category":"page"},{"location":"docs-CLI/","page":"CLI","title":"CLI","text":"To test the CLI system, please try the shellscript /test/main.sh in the GitHub repository. This will help you to find out how to use our CLI system.","category":"page"},{"location":"dynamics/disturbance/#Disturbance-input-to-attitude-dynamics","page":"Disturbance input","title":"Disturbance input to attitude dynamics","text":"","category":"section"},{"location":"dynamics/disturbance/","page":"Disturbance input","title":"Disturbance input","text":"Disturbance input for attitude motion is crucial to model how the spacecraft attitude changes from the effect of the outer environment. FlexibleSpacecraft.jl offers a disturbance input generation feature.","category":"page"},{"location":"dynamics/disturbance/#Disturbance-input-models","page":"Disturbance input","title":"Disturbance input models","text":"","category":"section"},{"location":"dynamics/disturbance/","page":"Disturbance input","title":"Disturbance input","text":"Constant torque input\nGravitational torque input","category":"page"},{"location":"dynamics/disturbance/#Parameter-settings-for-disturbance-input","page":"Disturbance input","title":"Parameter settings for disturbance input","text":"","category":"section"},{"location":"dynamics/disturbance/","page":"Disturbance input","title":"Disturbance input","text":"You need an parameter setting YAML file to configure the disturbance input to the spacecraft. The file is presented as follows:","category":"page"},{"location":"dynamics/disturbance/","page":"Disturbance input","title":"Disturbance input","text":"# set `property` distconfig to indicate that this file configures the disturbance input\nproperty: distconfig\n\n# set constant torque input with 3-d vector, define it to be [0, 0, 0] if no constant torque is applied\nconstant torque: [0.05, 0, 0]\n# Boolean to select if the gravitational torque is considered or not.\ngravitational torque: false","category":"page"},{"location":"dynamics/disturbance/#Libraries","page":"Disturbance input","title":"Libraries","text":"","category":"section"},{"location":"dynamics/disturbance/","page":"Disturbance input","title":"Disturbance input","text":"Modules = [AttitudeDisturbance]\nOrder   = [:type, :function]\nPages   = [\"AttitudeDisturbance.jl\"]","category":"page"},{"location":"dynamics/disturbance/#FlexibleSpacecraft.AttitudeDisturbance.DisturbanceConfig","page":"Disturbance input","title":"FlexibleSpacecraft.AttitudeDisturbance.DisturbanceConfig","text":"struct DisturbanceConfig\n\nStruct that configures disturbance torque to the spacecraft\n\n\n\n\n\n","category":"type"},{"location":"dynamics/disturbance/#FlexibleSpacecraft.AttitudeDisturbance._constant_torque-Tuple{AbstractVector{var\"#s15\"} where var\"#s15\"<:Real}","page":"Disturbance input","title":"FlexibleSpacecraft.AttitudeDisturbance._constant_torque","text":"_constant_torque(torque_config::AbstractVector{<:Real})\n\nFunction that returns the predefined constant disturbance torque vector\n\n\n\n\n\n","category":"method"},{"location":"dynamics/disturbance/#FlexibleSpacecraft.AttitudeDisturbance._constant_torque-Tuple{Nothing}","page":"Disturbance input","title":"FlexibleSpacecraft.AttitudeDisturbance._constant_torque","text":"constanttorque(torque_config::Nothing)\n\nFunction that returns zero disturbance torque for attitude dynamics\n\n\n\n\n\n","category":"method"},{"location":"dynamics/disturbance/#FlexibleSpacecraft.AttitudeDisturbance._gravity_gradient-NTuple{5, Any}","page":"Disturbance input","title":"FlexibleSpacecraft.AttitudeDisturbance._gravity_gradient","text":"_gravity_gradient(inertia, orbit_angular_velocity, C_ECI2Body, C_ECI2LVLH, LVLHframe_z)\n\nFunction that returns gravity gradient torque\n\nArguments\n\nInertia matrix\nAngular velocity of the orbit\nTransfromation matrix from ECI frame to body frame\nTransformation matrix from ECI frame to LVLH frame\nZ-vector of LVLH frame\n\n\n\n\n\n","category":"method"},{"location":"dynamics/disturbance/#FlexibleSpacecraft.AttitudeDisturbance.calc_attitudedisturbance-Tuple{DisturbanceConfig, DisturbanceInternals, Any, Any, Any, Any, Any}","page":"Disturbance input","title":"FlexibleSpacecraft.AttitudeDisturbance.calc_attitudedisturbance","text":"calc_attitudedisturbance\n\ncalculate disturbance torque input to the attitude dynamics\n\n\n\n\n\n","category":"method"},{"location":"dynamics/disturbance/#FlexibleSpacecraft.AttitudeDisturbance.set_attitudedisturbance-Tuple{AbstractDict}","page":"Disturbance input","title":"FlexibleSpacecraft.AttitudeDisturbance.set_attitudedisturbance","text":"set_attitudedisturbance\n\nset disturbance configuration from YAML setting file\n\n\n\n\n\n","category":"method"},{"location":"dynamics/structures/SpringMass/#Discrete-spring-mass-system","page":"Spring mass model","title":"Discrete spring-mass system","text":"","category":"section"},{"location":"dynamics/structures/SpringMass/","page":"Spring mass model","title":"Spring mass model","text":"Submodule SpringMass.jl provides the basic features to simulate the flexible appendages of the spacecraft with the discrete spring mass representation, dynamics calculation, and time evolution.","category":"page"},{"location":"dynamics/structures/SpringMass/#Libraries","page":"Spring mass model","title":"Libraries","text":"","category":"section"},{"location":"dynamics/structures/SpringMass/","page":"Spring mass model","title":"Spring mass model","text":"Modules = [SpringMass]\nOrder   = [:type, :function]\nPages   = [\"SpringMass.jl\"]","category":"page"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.ModalSystem","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.ModalSystem","text":"ModalSystem\n\nRepresentation of dynamics part of the structural system in mass-normalized modal coordinate.\n\nFields\n\ndim::Integer: dimension of the structural system\nPHI::Matrix: modal transformation matrix\nOMEGA::Matrix: modal angular velocity matrix\nXI::Matrix: modal damping matrix\n\nMathematical representation\n\nThis data containter corresponds to the left hand side of the equation of motion as follows:\n\nddotmathbfeta +  2 boldsymbolXi Omega dotmathbfeta + boldsymbolOmega^2 mathbfeta = ldots\n\nThe modal transformation is given as:\n\nmathbfx = boldsymbolPhi boldsymboleta\n\nboldsymbolPhi : transformation matrix from modal coordinate to physical coordinate\nboldsymbolOmega : modal angular velocity matrix\nboldsymbolXi : modal damping ratio matrix\n\nConstructor\n\nModalSystem(PHI::Matrix, OMEGA::Matrix, XI::Matrix)\n\nExample\n\n# You can convert the `physicalsystem::PhysicalSystem` into `::ModalSystem`\nphysicalsystem = PhysicalSystem(M, C, K)\n# Convert representation of the system in modal coordinate\nmodalsystem = physical2modal(physicalsystem)\n\n\n\n\n\n","category":"type"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.PhysicalSystem","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.PhysicalSystem","text":"PhysicalSystem\n\nRepresentation of dynamics part of the structural system in physical coordinate.\n\nFields\n\ndim::Integer: dimension of the structural system\nmass_matrix::Matrix: mass matrix in physical coordinate\ndamping_matrix::Matrix: damping matrix in physical coordinate\nstiffness_matrix::Matrix: stiffness matrix in physical coordinate\n\nMathematical representation\n\nThis data containter corresponds to the left hand side of the equation of motion as follows:\n\nmathbfM ddotmathbfx + mathbfD dotmathbfx + mathbfK mathbfx = ldots\n\nmathbfM : mass matrix\nmathbfD : damping matrix\nmathbfK : stiffness matrix\n\nConstructor\n\nPhysicalSystem(mass_matrix::Matrix, damping_matrix::Matrix, stiffness_matrix::Matrix)\n\nExample\n\n# Suppose M, D, K are given\n\n# Create representation of the system in physical coordinate\nphysicalsystem = PhysicalSystem(M, D, K)\n\n\n\n\n\n","category":"type"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.SpringMassModel","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.SpringMassModel","text":"SpringMassModel\n\nSpring mass representation of the entire system modeling\n\nMathematical representation\n\nddotmathbfeta + 2 boldsymbolXi Omega dotmathbfeta + boldsymbolOmega^2 mathbfeta = boldsymbolPhi^mathrmT mathbfD boldsymbolomega + boldsymbolPhi^mathrmT mathbfF_mathrmctrl mathbff_mathrmctrl + boldsymbolPhi^mathrmT mathbfF_mathrmdist mathbff_mathrmdist\n\nFields\n\nDOF::Integer: dimension of the displacement vector of the system\ndimcontrolinput::Integer: dimension of the control input vector\ndimdistinput::Integer: dimension of the disturbance input vector\nsystem::ModalSystem: mass-normalized modal representation of the system\nD::AbstractMatrix: coupling matrix wiht the attitude motion (time derivative of the angular velocity vector)\nFctrl::AbstractVecOrMat: coefficient matrix or vector of the control input vector\nFdist::AbstractVecOrMat: coefficient matrix or vector of the disturbance input vector\n\n\n\n\n\n","category":"type"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.SpringMassParams","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.SpringMassParams","text":"SpringMassParams\n\nstruct for accomodating the parameters for the spring mass structural model\n\nFields\n\nM::AbstractMatrix: mass matrix\nD::AbstractMatrix: damping matrix\nK::AbstractMatrix: stiffness matrix\nEcoupling::AbstractMatrix: coefficient matrix for the attitude coupling input\nEcontrol::AbstractVecOrMat: coefficient matrix for the control input\nEdisturbance::AbstractVecOrMat: coefficient matrix for the disturbance input\n\n\n\n\n\n","category":"type"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.StateSpace","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.StateSpace","text":"StateSpace\n\nState space representation of the structural system. This representation is mainly used for the time evolution of the structural system\n\nMathematical representation\n\nState space equation of the structural system with the control input, coupling input (angular velocity of the attitude dynamics), and the disturbance input is given as:\n\nfracddt mathbfz = mathbfA mathbfz + mathbfB mathbfu + mathbfE_mathrmcplg boldsymbolomega + mathbfE_mathrmdist mathbff_mathrmdist\n\nEach matrix is defined as follows:\n\nmathbfA equiv beginbmatrix\n    mathbf0  mathbfI \n    - boldsymbolOmega^2  -2 boldsymbolXi Omega\nendbmatrix\n\nmathbfB equiv beginbmatrix\n    mathbf0 \n    mathbfF_mathrmctrl\nendbmatrix\n\nmathbfE_mathrmcplg equiv beginbmatrix\n    mathbf0 \n    mathbfD\nendbmatrix\n\nmathbfE_mathrmdist equiv beginbmatrix\n    mathbf0 \n    mathbfF_mathrmdist\nendbmatrix\n\nFields\n\ndimstate::Int: dimension of the state vector\ndimctrlinput::Int: dimension of the control input vector\ndimdistinput::Int: dimension of the disturbance input vector\nsysA::SMatrix: system matrix\nsysB::StaticArray: coefficient matrix or vector for control input\nsysEcplg::SMatrix: input matrix for the coupling part (subscript represents coupling)\nsysEdist::StaticArray: coefficient matrix or vector for the disturbance input (subscript represents disturbance)\n\nConstructor\n\nStateSpace(model::SpringMassModel)\n\n\n\n\n\n","category":"type"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.defmodel-Tuple{AbstractDict}","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.defmodel","text":"defmodel(paramdict::AbstractDict)\n\nArgument\n\nparamdict::AbstractDict: dictionary that incorporates the parameter setting of the spring-mass structural system. This dictionary works with the parameter setting YAML file\n\n\n\n\n\n","category":"method"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.defmodel-Tuple{SpringMassParams}","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.defmodel","text":"defmodel(params::SpringMassParams)\n\nfunction that incorporates the model formulation process\n\nArgument\n\nparams::SpringMassParams: struct that incorporates the parameter setting of the spring-mass structural system\n\n\n\n\n\n","category":"method"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.modalstate2physicalstate-Tuple{StateSpace, AbstractVector{var\"#s32\"} where var\"#s32\"<:(AbstractVector{T} where T)}","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.modalstate2physicalstate","text":"modalstate2physicalstate(model::StateSpace, modalstates::AbstractVector{<:AbstractVector})\n\nconvert the vector of the state vector in modal coordinate into physical coordiniate\n\nArgument\n\nmodel::StateSpace: state-space model for simulation\nmodalstates::AbstractVector{<:AbstractVector}: vector of state vector, which is a trajectory or time history of the state vector\n\nUsage\n\nphysicalstates = modalstate2physicalstate(model, states)\n\n\n\n\n\n","category":"method"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.modalstate2physicalstate-Tuple{StateSpace, AbstractVector{var\"#s32\"} where var\"#s32\"<:Real}","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.modalstate2physicalstate","text":"modalstate2physicalstate(model::StateSpace, state::AbstractVector{<:Real})\n\nconvert the state vector in modal coordinate into physical coordiniate\n\nArgument\n\nmodel::StateSpace: state-space model for simulation\nstate::AbstractVector{<:Real}: state vector\n\nUsage\n\nphysicalstate = modalstate2physicalstate(model, state)\n\n\n\n\n\n","category":"method"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.physical2modal-Tuple{Matrix{T} where T, Matrix{T} where T, Matrix{T} where T}","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.physical2modal","text":"physical2modal(mass_matrix::Matrix, damping_matrix::Matrix, stiffness_matrix::Matrix)::ModalSystem\n\nreturn tuple of the modal transformation matrix and modal damping matrix for the mass-normalized modal coordinates\n\n\n\n\n\n","category":"method"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.physicalstate2modalstate-Tuple{StateSpace, AbstractVector{var\"#s32\"} where var\"#s32\"<:(AbstractVector{T} where T)}","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.physicalstate2modalstate","text":"physicalstate2modalstate(model::StateSpace, physicalstates::AbstractVector{<:AbstractVector})\n\nconvert the vector of state vector in physical coordinate into modal coordinate\n\nArgument\n\nmodel::StateSpace: state-space model for simulation\nphysicalstates::AbstractVector{<:AbstractVector}: vector of state vector\n\n\n\n\n\n","category":"method"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.physicalstate2modalstate-Tuple{StateSpace, AbstractVector{var\"#s32\"} where var\"#s32\"<:Real}","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.physicalstate2modalstate","text":"physicalstate2modalstate(model::StateSpace, physicalstate::AbstractVector{<:Real})\n\nconvert the state vector in physical coordinate into modal coordinate\n\nArgument\n\nmodel::StateSpace: state-space model for simulation\nphysicalstate::AbstractVector{<:Real}: state vector\n\n\n\n\n\n","category":"method"},{"location":"dynamics/structures/SpringMass/#FlexibleSpacecraft.StructuresBase.SpringMass.updatestate-Tuple{StateSpace, Real, Real, AbstractVector{T} where T, AbstractVector{T} where T, Union{Real, AbstractVector{T} where T}, Union{Real, AbstractVector{T} where T}}","page":"Spring mass model","title":"FlexibleSpacecraft.StructuresBase.SpringMass.updatestate","text":"updatestate(model::StateSpace, Tsampling::Real, currenttime::Real, currentstate::AbstractVector, angularvelocity::AbstractVector, controlinput::Union{AbstractVector, Real}, distinput::Union{AbstractVector, Real})::AbstractVector\n\nCalculates time evolution of the structural system with Runge-Kutta method\n\n\n\n\n\n","category":"method"},{"location":"examples/example/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"examples/example/","page":"Example","title":"Example","text":"This documentation page provides an example script and quick start guide for the use of FlexibleSpacecraft.jl","category":"page"},{"location":"examples/example/#Example-script-and-files","page":"Example","title":"Example script and files","text":"","category":"section"},{"location":"examples/example/","page":"Example","title":"Example","text":"Example script main.jl is found in the /test directory. Configuration and parameter setting file is preferred for the simulation, and these files should be in YAML format. Detailed formatting for the parameter settings is found in the Parameter configuration.","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"These files are found on the test directory in the GitHub repository. Run the main.jl, and you will get the simulation result. By default, the software provides the data set of simulation results and plots of those data. It also gives you a GIF animation of the spacecraft attitude.","category":"page"},{"location":"examples/example/#Description-of-the-main.jl-and-UI","page":"Example","title":"Description of the main.jl and UI","text":"","category":"section"},{"location":"examples/example/","page":"Example","title":"Example","text":"This section illustrates the user interface for running the attitude-structure coupling simulation with FlexibleSpacecraft.jl. This description is based on the contents in main.jl.","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"Firstly, you need to load the module FlexibleSpacecraft into your namespace.","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"using FlexibleSpacecraft","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"You need to input the simulation parameters and configuration settings. Our API will help you by loading the parameter configuration file. See Parameter configuration for the configuration file format.","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"paramfilepath = \"./test/spacecraft2.yml\"\n(simconfig, attitudemodel, distconfig, initvalue, orbitinfo, strparam, strmodel) = readparamfile(paramfilepath)","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"Then you are all set! Just run runsimulation(). This function is the high-level user interface for simulation. You can find more detailed information at Simulation interface","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"println(\"Begin simulation!\")\n@time (time, attitudedata, orbitdata, strdata) = runsimulation(attitudemodel, strmodel, initvalue, orbitinfo, distconfig, simconfig)\nprintln(\"Completed!\")","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"Congrats! You have successfully run your simulation! Let's process your simulation data. We have covered that for you. Run quaternion_constraint() to check your result is physically making sense.","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"@test Evaluation.quaternion_constraint(attitudedata.quaternion)","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"Our visualization feature helps you to process your simulation effectively.","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"fig1 = PlotRecipe.angularvelocities(time, attitudedata.angularvelocity)\ndisplay(fig1)\n\nfig2 = PlotRecipe.quaternions(time, attitudedata.quaternion)\ndisplay(fig2)\n\n# Plot of the body frame with respect to ECI frame\nfig3 = PlotRecipe.framegif(time, LVLHref, attitudedata.RPYframe, Tgif = 20, FPS = 8)\ndisplay(fig3)\n\n# Plot of the euler angle\nfig4 = PlotRecipe.eulerangles(time, attitudedata.eulerangle)\ndisplay(fig4)\n\nfig5 = plot(time, strdata.physicalstate[:, 1])\nfig5 = plot!(time, strdata.physicalstate[:, 2])\ndisplay(fig5)","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"FlexibleSpacecraft.jl also helps you to save the simulation data as CSV files. Specify the directory you want to save your data. The simulation result will be saved as a directory with timestamp.","category":"page"},{"location":"examples/example/","page":"Example","title":"Example","text":"location = \"output\" # specify where to save your data\noutputdata = SimData(time, attitudedata, orbitdata)\nwrite(location, outputdata)","category":"page"},{"location":"simulation/simulation_config/#Parameter-configuration","page":"Configuration","title":"Parameter configuration","text":"","category":"section"},{"location":"simulation/simulation_config/","page":"Configuration","title":"Configuration","text":"FlexibleSpacecraft.jl offers an soft cording method to allow you to manage your simulation parameters and configurations. You need parameter setting and simulation configuration files to run your simulation with your desired setting. This documentation illustrates how to prepare your simulation configuration files.","category":"page"},{"location":"simulation/simulation_config/#Configuration-file-format","page":"Configuration","title":"Configuration file format","text":"","category":"section"},{"location":"simulation/simulation_config/","page":"Configuration","title":"Configuration","text":"Configuration file is organized with the YAML format. For more information about YAML, please visit The Official YAML Web Site.","category":"page"},{"location":"simulation/simulation_config/","page":"Configuration","title":"Configuration","text":"config:\n    name: example spacecraft No. 2\n    note: This model is for test purpose\n    sampling time: 1e-2 # Sampling period of simulation (second)\n    time length: 1000 # Time length of simulation (second)\n\ninitial value:\n    quaternion: [0, 0, 0, 1]\n    angular velocity: [0, 0, 0]\n\n\nattitude dynamics:\n    model: Linear coupling\n    inertia: [\n        1000, 0, 0,\n        0, 1000, 0,\n        0, 0, 1000\n    ]\n\n    coupling: [\n        1, 0,\n        0, 1,\n        0, 0\n    ]\n\ndisturbance:\n    constant torque: [0.0, 0.0, 0.0]\n    gravitational torque: false\n\nOrbit:\n    Dynamics model: Circular\n    Orbital elements:\n        right ascension: 0\n        inclination: 0\n        semimajor axis: 6763e3\n        eccentricity: 0\n        argument of perigee: 0\n        true anomaly at epoch: 0\n\nmodeling: spring-mass\n\nappendage:\n    modeling: spring-mass\n    system:\n        coord: physical\n        DOF: 2\n        mass: [\n            100, 0,\n            0, 50\n        ]\n        stiffness: [\n            6e4, -1e4,\n            -1e4, 1e4\n        ]\n        damping:\n            config: Rayleigh\n            alpha: 0\n            beta: 0.005\n    coupling: [\n            1, 0, 0,\n            0, 1, 0,\n        ]\n    control input:\n        dimension: 1\n        coefficient: [\n                5,\n                0\n            ]\n    disturbance input:\n        dimension: 1\n        coefficient: [\n                3,\n                0\n            ]","category":"page"},{"location":"simulation/simulation_config/#Parameter-setting-API-for-the-configuration-file","page":"Configuration","title":"Parameter setting API for the configuration file","text":"","category":"section"},{"location":"simulation/simulation_config/","page":"Configuration","title":"Configuration","text":"Simply call the function readparamfile, giving the path of the configuration file.","category":"page"},{"location":"simulation/simulation_config/","page":"Configuration","title":"Configuration","text":"paramfilepath = \"./test/spacecraft2.yml\"\n(simconfig, attitudemodel, distconfig, initvalue, orbitinfo, strparam, strmodel) = readparamfile(paramfilepath)","category":"page"},{"location":"simulation/simulation_config/","page":"Configuration","title":"Configuration","text":"Detailed docs for the parameter setting API is found on the Parameter setting API","category":"page"},{"location":"simulation/simulation_config/","page":"Configuration","title":"Configuration","text":"This file is used for CLI feature. See Documentation for the CLI for more information","category":"page"},{"location":"dynamics/dynamics/#Dynamics","page":"Dynamics","title":"Dynamics","text":"","category":"section"},{"location":"dynamics/dynamics/","page":"Dynamics","title":"Dynamics","text":"Dynamics simulation is the key feature of the FlexibleSpacecraft.jl. This documentation provides the information on the features and APIs that allow you to execute your simulation conveniently.","category":"page"},{"location":"dynamics/dynamics/#DynamicsBase.jl-module","page":"Dynamics","title":"DynamicsBase.jl module","text":"","category":"section"},{"location":"dynamics/dynamics/","page":"Dynamics","title":"Dynamics","text":"DynamicsBase.jl is a submodule which is the basis of all the features on dynamics simulation with FlexibleSpacecraft.jl.","category":"page"},{"location":"dynamics/dynamics/","page":"Dynamics","title":"Dynamics","text":"Modules = [DynamicsBase]\nOrder   = [:type, :function]\nPages   = [\"DynamicsBase.jl\"]","category":"page"},{"location":"dynamics/dynamics/#Base.:~-Tuple{AbstractVector{T} where T}","page":"Dynamics","title":"Base.:~","text":"Base.:~(x::AbstractVector)\n\noperator for calculating the skew-symmetric matrix. It will be used for internal calculation of the calculation of the attitude dynamics of FlexibleSpacecraft.jl.\n\n\n\n\n\n","category":"method"},{"location":"dynamics/dynamics/#FlexibleSpacecraft.DynamicsBase.setdynamicsmodel-Tuple{AbstractDict}","page":"Dynamics","title":"FlexibleSpacecraft.DynamicsBase.setdynamicsmodel","text":"setdynamicsmodel\n\nLoad a dictionaly data of configuration and construct the appropriate model for the simulation for the attitude dynamics\n\n\n\n\n\n","category":"method"},{"location":"dynamics/dynamics/#FlexibleSpacecraft.DynamicsBase.update_angularvelocity-Tuple{Union{LinearCouplingModel, RigidBodyModel}, Real, AbstractVector{var\"#s14\"} where var\"#s14\"<:Real, Real, Frame, Union{Real, AbstractVector{var\"#s13\"} where var\"#s13\"<:Real}, Union{Real, AbstractVector{var\"#s12\"} where var\"#s12\"<:Real}, Union{Real, AbstractVector{var\"#s4\"} where var\"#s4\"<:Real}, Union{Real, AbstractVector{var\"#s3\"} where var\"#s3\"<:Real}}","page":"Dynamics","title":"FlexibleSpacecraft.DynamicsBase.update_angularvelocity","text":"update_angularvelocity\n\nupdate the angular velocity of the angular velocity of the attitude dynamics. Interface to the individual functions implemented in each submodules\n\nArguments\n\nmodel: dynamics model for the atittude dynamics\ncurrentTime::Real: current time\nangularvelocity::AbstractVector{<:Real}: angular velocity vector\nTsampling::Real: sampling period for the dynamics simulation\ncurrentbodyframe::Frame: current frame variable of the spacecraft's body fixed frame\ndistinput::AbstractVector{<:Real}: disturbance input vector\nstraccel::AbstractVector{<:Real}: acceleration of the structural response of the flexible appendages\nstrvelocity::AbstractVector{<:Real}: velocity of the structural response of the flexible appendages\n\n\n\n\n\n","category":"method"},{"location":"dynamics/frames/#Frames","page":"Frames","title":"Frames","text":"","category":"section"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"We need several coordinate frames to express spacecraft attitude dynamics.","category":"page"},{"location":"dynamics/frames/#ECI-(Earth-Centered-Inertial)-Frame","page":"Frames","title":"ECI (Earth-Centered Inertial) Frame","text":"","category":"section"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Inertial frame of our dynamics. Always fixed. Attitude dynamics are usually described based on this frame.","category":"page"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Origin: center of the Earth\nX-axis: direction of crossing between the equator and latitude 0 degrees at the initial state\nY-axis: direction of crossing between the equator and longitude +90 degrees at the initial state\nZ-axis: direction corresponding to the Earth's rotation axis","category":"page"},{"location":"dynamics/frames/#ECEF-(Earth-Centered-Earth-fixed)-Frame","page":"Frames","title":"ECEF (Earth-Centered Earth-fixed) Frame","text":"","category":"section"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Rotating coordinate frame according to the Earth's rotation. This frame is used mainly to express the ground equipment on the Earth.","category":"page"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Origin: center of the Earth\nX-axis: longitude 0 degrees on Greenwich meridian\nY-axis: longitude 90 degrees east\nZ-axis: direction corresponding to the Earth's north pole","category":"page"},{"location":"dynamics/frames/#LVLH-(Local-Vertical-Local-Horizontal)-frame","page":"Frames","title":"LVLH (Local Vertical Local Horizontal) frame","text":"","category":"section"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Referential frame of spacecraft on orbit. This frame describes the motion of spacecraft on orbit. And spacecraft attitude (Spacecraft-fixed frame) is expressed with respect to this frame.","category":"page"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Origin: center of the spacecraft\nX-axis: direction of travel on orbit (roll axis)\nY-axis: orthogonal direction to orbit plane (pitch axis)\nZ-axis: direction to the Earth (yaw axis)","category":"page"},{"location":"dynamics/frames/#Body-frame-(Spacecraft-fixed-frame)","page":"Frames","title":"Body frame (Spacecraft-fixed frame)","text":"","category":"section"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Frame that is fixed to the spacecraft body. Describing the attitude of spacecraft.","category":"page"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Origin: center of the spacecraft or referential point on spacecraft\nX-axis: X-axis of the spacecraft body\nY-axis: Y-axis of the spacecraft body\nZ-axis: Z-axis of the spacecraft body","category":"page"},{"location":"dynamics/rigid-body/#Rigid-body-dynamics-model","page":"Rigid body","title":"Rigid body dynamics model","text":"","category":"section"},{"location":"dynamics/rigid-body/","page":"Rigid body","title":"Rigid body","text":"Submodule RigidBody provides simulation algorithm for the simple rigid body spacecraft attitude dynamics. This model does not include the flexible structural appendages. ","category":"page"},{"location":"dynamics/rigid-body/","page":"Rigid body","title":"Rigid body","text":"RigidBody","category":"page"},{"location":"dynamics/rigid-body/#FlexibleSpacecraft.DynamicsBase.RigidBody","page":"Rigid body","title":"FlexibleSpacecraft.DynamicsBase.RigidBody","text":"module RigidBody\n\nmodule that consists variables and functions needed for the simulation of rigid body spacecraft attitude dynamics. Internal module for FlexibleSpacecraft.jl\n\nUsage\n\ninclude(\"RigidBody.jl\")\nusing .RigidBody\n\n\n\n\n\n","category":"module"},{"location":"dynamics/rigid-body/#Parameter-settings-for-rigid-body-attitude-dynamics","page":"Rigid body","title":"Parameter settings for rigid body attitude dynamics","text":"","category":"section"},{"location":"dynamics/rigid-body/","page":"Rigid body","title":"Rigid body","text":"Parameter setting YAML files should be organized as follows:","category":"page"},{"location":"dynamics/rigid-body/","page":"Rigid body","title":"Rigid body","text":"property: dynamics\nname: example spacecraft\nnote: This model is for test purpose\n\ndynamicsmodel: Rigid body # This must be set `Rigid body`\n\nplatform:\n    inertia: [ # inertia matrix of the spacecraft\n        50000, 0, 0,\n        0, 50000, 0,\n        0, 0, 50000\n        ]","category":"page"},{"location":"dynamics/rigid-body/","page":"Rigid body","title":"Rigid body","text":"dynamicsmodel should be set Rigid body to tell the software that you are using the rigid body dynamics model.","category":"page"},{"location":"dynamics/rigid-body/#Public-interfaces","page":"Rigid body","title":"Public interfaces","text":"","category":"section"},{"location":"dynamics/rigid-body/","page":"Rigid body","title":"Rigid body","text":"RigidBodyModel\nupdate_angularvelocity","category":"page"},{"location":"dynamics/rigid-body/#FlexibleSpacecraft.DynamicsBase.RigidBody.RigidBodyModel","page":"Rigid body","title":"FlexibleSpacecraft.DynamicsBase.RigidBody.RigidBodyModel","text":"struct RigidBodyModel\n\nData container of rigid body spacecraft model. Used to specify and configure the parameter settings for simulation and control model in FlexibleSpacecraft.jl\n\nFields of struct RigidBodyModel\n\ninertia::SMatrix{3, 3, <:Real}: Inertia matrix of spacecraft platform\n\n\n\n\n\n","category":"type"},{"location":"dynamics/rigid-body/#FlexibleSpacecraft.DynamicsBase.update_angularvelocity","page":"Rigid body","title":"FlexibleSpacecraft.DynamicsBase.update_angularvelocity","text":"update_angularvelocity\n\nupdate the angular velocity of the angular velocity of the attitude dynamics. Interface to the individual functions implemented in each submodules\n\nArguments\n\nmodel: dynamics model for the atittude dynamics\ncurrentTime::Real: current time\nangularvelocity::AbstractVector{<:Real}: angular velocity vector\nTsampling::Real: sampling period for the dynamics simulation\ncurrentbodyframe::Frame: current frame variable of the spacecraft's body fixed frame\ndistinput::AbstractVector{<:Real}: disturbance input vector\nstraccel::AbstractVector{<:Real}: acceleration of the structural response of the flexible appendages\nstrvelocity::AbstractVector{<:Real}: velocity of the structural response of the flexible appendages\n\n\n\n\n\n","category":"function"},{"location":"development/environment/#Development-environment","page":"Environment","title":"Development environment","text":"","category":"section"},{"location":"development/environment/#Quick-Start-Guide","page":"Environment","title":"Quick Start Guide","text":"","category":"section"},{"location":"development/environment/#開発環境の用意","page":"Environment","title":"開発環境の用意","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"Docker Desktopをインストールする．\nVS Codeをインストールする．\nVS Codeに拡張機能 Remote Containers をインストールする．","category":"page"},{"location":"development/environment/#開発リポジトリの用意","page":"Environment","title":"開発リポジトリの用意","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"オリジナルのリポジトリをフォークする．\nローカルにフォークしたリポジトリをクローンする．\nVS Codeでローカルのリポジトリを開く．\nコマンドパレットから Remote-Containers: Open Folder in Container... を実行\nプロジェクトのフォルダがコンテナ内で開かれる．   初回ビルドの時は時間がかかる可能性がある．\nmain.jlを開く．\nコマンドパレットから Julia: Execute File in REPL を実行する．\nプログラムが動けば成功！","category":"page"},{"location":"development/environment/#Remote-Containersのインストール","page":"Environment","title":"Remote -Containersのインストール","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"Remote-Containersは，Dockerコンテナ内でVS Codeを開いて開発を行うことが出来るようにするVS Codeの拡張機能です．インストールは簡単です．","category":"page"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"VS CodeのEXTENSIONS: MARKETPLACEでremote-containersを検索する．\nRemote-Containersをインストールする","category":"page"},{"location":"development/environment/#開発環境の設定ファイル","page":"Environment","title":"開発環境の設定ファイル","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"FlexibleSpacecraft.jlのリポジトリをクローンしてください．ソースコード・ドキュメンテーションおよび開発環境の構築に必要なファイルがすべてダウンロードされます．","category":"page"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"開発環境はDockerコンテナの中に用意しています．.devcontainer/DockerfileにDocker Imageを作るためのDockerfileが用意されています．","category":"page"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"Dockerfileは，必要なアプリやパッケージと環境設定を記述したファイルです．このファイルを基にしてコンテナが作られます．\ndevcontainer.jsonは，VS codeの拡張機能Remote-Containersを使ってコンテナを立ち上げてVS codeで開発する際の設定などを書いておくファイルです．extensionsの部分に，リモート環境で使いたいVS Codeの拡張機能を書いておくと，VS Codeでコンテナを開くときにインストールされます．今回はJuliaの拡張機能を追加します．ほかにリモート環境で使いたい拡張機能を書いておけば，インストールされます．このファイルに書く内容は，VS Codeで拡張機能のページを開いたとき，下の図の赤枠の部分に表示されます．","category":"page"},{"location":"development/environment/#Package-FlexibleSpacecraft-のアップデート","page":"Environment","title":"Package FlexibleSpacecraft のアップデート","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"開発環境を用意出来たら，まずパッケージのアップデートをする必要がある．","category":"page"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"julia> ]: パッケージモードに入る\n(FlexibleSpacecraft) pkg> update: パッケージをすべてアップデート\n依存パッケージがアップデートされる．","category":"page"},{"location":"development/environment/#Reference","page":"Environment","title":"Reference","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"Developing inside a Container","category":"page"},{"location":"dynamics/structures/structures/#Structural-analysis-of-the-flexible-appendages","page":"Index","title":"Structural analysis of the flexible appendages","text":"","category":"section"},{"location":"dynamics/structures/structures/","page":"Index","title":"Index","text":"FlexibleSpacecraft.jl offers an extensive simulation features to simulate the structural motion of the flexible appendages of the spacecraft. The submodule Structures.jl is the high-level module for the simulation regarding the structural dynamics. This page provides the overview of the components that consists of the Structures.jl.","category":"page"},{"location":"dynamics/structures/structures/#Basic-simulation-features","page":"Index","title":"Basic simulation features","text":"","category":"section"},{"location":"dynamics/structures/structures/","page":"Index","title":"Index","text":"Discrete spring-mass system: simulation features with the discrete spring-mass model","category":"page"},{"location":"dynamics/structures/structures/#Structural-modelings","page":"Index","title":"Structural modelings","text":"","category":"section"},{"location":"dynamics/structures/structures/","page":"Index","title":"Index","text":"features to be developed","category":"page"},{"location":"dynamics/structures/structures/#APIs-for-the-structural-simulation","page":"Index","title":"APIs for the structural simulation","text":"","category":"section"},{"location":"dynamics/structures/structures/","page":"Index","title":"Index","text":"features to be developed","category":"page"},{"location":"docs-module/docs-PlotRecipe/#Plot-recipe","page":"Plot recipe","title":"Plot recipe","text":"","category":"section"},{"location":"docs-module/docs-PlotRecipe/","page":"Plot recipe","title":"Plot recipe","text":"FlexibleSpacecraft.jl have a post-processing features that allow you to create the plots of the simulation results.","category":"page"},{"location":"docs-module/docs-PlotRecipe/","page":"Plot recipe","title":"Plot recipe","text":"Modules = [PlotRecipe.FramePlot, PlotRecipe.PhysicalQuantity]\nOrder   = [:type, :function]\nPages   = [\"FramePlot.jl\", \"PhysicalQuantity.jl\"]","category":"page"},{"location":"docs-module/docs-PlotRecipe/#FlexibleSpacecraft.PlotRecipe.FramePlot.dispframe-Tuple{Real, Frame, Frame}","page":"Plot recipe","title":"FlexibleSpacecraft.PlotRecipe.FramePlot.dispframe","text":"function dispframe(time, refCoordinate, coordinate)\n\nGenerates the 3D figure of body fixed frame\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-PlotRecipe/#FlexibleSpacecraft.PlotRecipe.FramePlot.framegif-Tuple{StepRangeLen, Frame, Vector{var\"#s26\"} where var\"#s26\"<:Frame}","page":"Plot recipe","title":"FlexibleSpacecraft.PlotRecipe.FramePlot.framegif","text":"function frame_gif(time, Tsampling, refCoordinate, bodyCoordinateArray, Tgif = 0.4, FPS = 15)\n\nGenerates animation of frame rotation as GIF figure\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-PlotRecipe/#FlexibleSpacecraft.PlotRecipe.PhysicalQuantity.angularvelocities-Tuple{StepRangeLen, Vector{SVector{3, var\"#s28\"} where var\"#s28\"<:Real}}","page":"Plot recipe","title":"FlexibleSpacecraft.PlotRecipe.PhysicalQuantity.angularvelocities","text":"function angularvelocities(time::StepRangeLen, angularvelocity::Vector{StaticArrays.SVector{3, <:Real}}; timerange::Tuple{<:Real, <:Real} = (0, 0))::AbstractPlot\n\nPlots angular velocity of each axis in one figure\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-PlotRecipe/#FlexibleSpacecraft.PlotRecipe.PhysicalQuantity.eulerangles-Tuple{StepRangeLen, Vector{SVector{3, var\"#s28\"} where var\"#s28\"<:Real}}","page":"Plot recipe","title":"FlexibleSpacecraft.PlotRecipe.PhysicalQuantity.eulerangles","text":"eulerangles(time::StepRangeLen, eulerangle::Vector{StaticArrays.SVector{3, <:Real}}; timerange::Tuple{<:Real, <:Real} = (0, 0))::AbstractPlot\n\nPlots time history of euler angles\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-PlotRecipe/#FlexibleSpacecraft.PlotRecipe.PhysicalQuantity.quaternions-Tuple{StepRangeLen, Vector{SVector{4, var\"#s29\"} where var\"#s29\"<:Real}}","page":"Plot recipe","title":"FlexibleSpacecraft.PlotRecipe.PhysicalQuantity.quaternions","text":"function quaternions(time::StepRangeLen, quaternion::Vector{StaticArrays.SVector{4, <:Real}}; timerange::Tuple{<:Real, <:Real} = (0, 0))\n\nPlot quaternions in single plot\n\n\n\n\n\n","category":"method"},{"location":"dynamics/orbit/#Orbit-simulation","page":"Orbit","title":"Orbit simulation","text":"","category":"section"},{"location":"dynamics/orbit/","page":"Orbit","title":"Orbit","text":"FlexibleSpacecraft.jl provides the basic simulation feature for orbital motion of the spacecraft. Orbital motion is the cause for the gravitational disturbance torque, which is a dominant disturbance for the spacecraft with flexible and large structures. Also the orbital motion affects the directional control of the spacecraft attitude.","category":"page"},{"location":"dynamics/orbit/#Orbital-models","page":"Orbit","title":"Orbital models","text":"","category":"section"},{"location":"dynamics/orbit/","page":"Orbit","title":"Orbit","text":"Circular orbit\nElliptical orbit (To be implemented!)","category":"page"},{"location":"dynamics/orbit/#Parameter-settings-for-orbital-simulation","page":"Orbit","title":"Parameter settings for orbital simulation","text":"","category":"section"},{"location":"dynamics/orbit/","page":"Orbit","title":"Orbit","text":"Parameter setting files should be prepared with YAML format. The basic setting file will be as follows:","category":"page"},{"location":"dynamics/orbit/","page":"Orbit","title":"Orbit","text":"# Specify what type of configuration file you will use\nproperty: orbit\n\n# Specify the model used in the simulation of orbital motion\nDynamicsModel: CircularOrbit\n\n# Orbital elements\nOrbitalElements:\n    right ascention: 0\n    inclination: 0\n    semimajor axis: 421e3\n    eccentricity: 0\n    argument of perigee: 0\n    true anomaly at epoch: 0\n\n# Note for this parameter setting\nOrbitInfo: Test orbit parameters","category":"page"},{"location":"dynamics/orbit/","page":"Orbit","title":"Orbit","text":"The orbital elements are the basic parameter for the attitude calculation. Specify the parameters under which your spacecraft will orbit.","category":"page"},{"location":"docs-module/docs-SimulationAPI/#Simulation-API","page":"API","title":"Simulation API","text":"","category":"section"},{"location":"docs-module/docs-SimulationAPI/","page":"API","title":"API","text":"This section contains information about the API for the simulation system of FlexibleSpacecraft.jl","category":"page"},{"location":"docs-module/docs-SimulationAPI/","page":"API","title":"API","text":"Our API mainly contains the following sub-modules:","category":"page"},{"location":"docs-module/docs-SimulationAPI/","page":"API","title":"API","text":"ParameterSettingBase: API for parameter setting for simulation core","category":"page"},{"location":"docs-module/docs-SimulationAPI/","page":"API","title":"API","text":"The high-level API function for the simulation is runsimulation. Basically you can run your simulation by passing all the necessary arguments into function runsimulation.","category":"page"},{"location":"docs-module/docs-SimulationAPI/#Parameter-setting-API","page":"API","title":"Parameter setting API","text":"","category":"section"},{"location":"docs-module/docs-SimulationAPI/","page":"API","title":"API","text":"Modules = [ParameterSettingBase]\nOrder   = [:type, :function]\nPages   = [\"ParameterSettingBase.jl\"]","category":"page"},{"location":"docs-module/docs-SimulationAPI/#FlexibleSpacecraft.ParameterSettingBase.SimulationConfig","page":"API","title":"FlexibleSpacecraft.ParameterSettingBase.SimulationConfig","text":"struct SimulationConfig\n\nstruct that contains the information about the simulation configuration\n\nfields\n\nspacecraft::String: name of the spacecraft\nnote::String: note on the parameter settings\nsimulationtime::Real: time length of the simulation\nsamplingtime::Real: sampling time of the simulation\n\n\n\n\n\n","category":"type"},{"location":"docs-module/docs-SimulationAPI/#FlexibleSpacecraft.ParameterSettingBase._setinitvalue-Tuple{AbstractDict}","page":"API","title":"FlexibleSpacecraft.ParameterSettingBase._setinitvalue","text":"_setinitvalue(filepath::String)::InitData\n\nDefine the initial value for simulation\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-SimulationAPI/#FlexibleSpacecraft.ParameterSettingBase._setsimconfig-Tuple{AbstractDict}","page":"API","title":"FlexibleSpacecraft.ParameterSettingBase._setsimconfig","text":"_setsimconfig(filepath::String)::SimulationConfig\n\ninitialize the simulation configurations\n\nReturn value\n\nsimconfig::SimulationConfig\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-SimulationAPI/#FlexibleSpacecraft.ParameterSettingBase.readparamfile-Tuple{String}","page":"API","title":"FlexibleSpacecraft.ParameterSettingBase.readparamfile","text":"readparamfile\n\nread the configuration of the spacecraft from the configuration file in YAML format.\n\nArguments\n\nfilepath::String: Path to the configuration file\n\nUsage\n\nparamfilepath = \"./test/spacecraft2.yml\"\n(simconfig, attitudemodel, distconfig, initvalue, orbitinfo, strparam, strmodel) = readparamfile(paramfilepath)\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#Kinematics","page":"Kinematics","title":"Kinematics","text":"","category":"section"},{"location":"dynamics/kinematics/#KinematicsBase.jl-module","page":"Kinematics","title":"KinematicsBase.jl module","text":"","category":"section"},{"location":"dynamics/kinematics/","page":"Kinematics","title":"Kinematics","text":"KinematicsBase.jl is a submodule which is the basis of all the features on dynamics simulation with FlexibleSpacecraft.jl.","category":"page"},{"location":"dynamics/kinematics/","page":"Kinematics","title":"Kinematics","text":"Modules = [KinematicsBase]\nOrder   = [:type, :function]\nPages   = [\"KinematicsBase.jl\"]","category":"page"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase.InitData","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase.InitData","text":"struct InitData\n\nStruct that consists of the initial state value of the time-variant physical amounts in simulation\n\n\n\n\n\n","category":"type"},{"location":"dynamics/kinematics/#Base.Math.deg2rad-Tuple{Union{Vector{var\"#s28\"} where var\"#s28\"<:Real, SVector{3, var\"#s29\"} where var\"#s29\"<:Real}}","page":"Kinematics","title":"Base.Math.deg2rad","text":"Base.Math.deg2rad(rotationangle::Union{SVector{3, <:Real}, Vector{<:Real})\n\nConvert rotation angle vector in degrees to radians\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#Base.Math.rad2deg-Tuple{Union{Vector{var\"#s28\"} where var\"#s28\"<:Real, SVector{3, var\"#s29\"} where var\"#s29\"<:Real}}","page":"Kinematics","title":"Base.Math.rad2deg","text":"Base.Math.rad2deg(rotationangle::Union{SVector{3, <:Real}, Vector{<:Real})\n\nConvert rotation angle vector in radians to degrees\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase._calcdifferential_kinematics-Tuple{SVector{3, var\"#s28\"} where var\"#s28\"<:Real, SVector{4, var\"#s27\"} where var\"#s27\"<:Real}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase._calcdifferential_kinematics","text":"_calcdifferential_kinematics(omega::Vector, quaterion::Vector)\n\nGet differential of quaternion from equation of kinematics\n\nArguments\n\nomega: angular velocity of system\nquaterion: current value of quaternion\n\nReturn\n\ndifferential: differential of equation of kinematics\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase._initangularvelocity-Tuple{Any, SVector{3, var\"#s28\"} where var\"#s28\"<:Real}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase._initangularvelocity","text":"function _initangularvelocity(simdata_num, initital_value::Vector)\n\nInitialize array that contains time response of angular velocity\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase._initquaternion-Tuple{Any, SVector{4, var\"#s28\"} where var\"#s28\"<:Real}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase._initquaternion","text":"function _initquaternion(simdata_num, initial_value::Vector[4])\n\ninitialize array that contains time response of quaternion\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase.dcm2euler-Tuple{Union{Matrix{var\"#s27\"} where var\"#s27\"<:Real, SMatrix{3, 3, var\"#s28\", L} where {var\"#s28\"<:Real, L}}}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase.dcm2euler","text":"dcm2euler(dcm::Union{SMatrix{3, 3, <:Real}, Matrix{<:Real}})::SVector{3, <:Real}\n\ncalculates z-y-x euler rotation angle from direction cosine matrix\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase.dcm2quaternion-Tuple{Union{Matrix{var\"#s27\"} where var\"#s27\"<:Real, SMatrix{3, 3, var\"#s28\", L} where {var\"#s28\"<:Real, L}}}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase.dcm2quaternion","text":"dcm2quaternion(dcm::Matrix{Real})::Vector{Real}\n\ncalculate quaternion from direction cosine matrix (DCM) dcm\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase.euler2dcm-Tuple{Union{Vector{var\"#s27\"} where var\"#s27\"<:Real, SVector{3, var\"#s28\"} where var\"#s28\"<:Real}}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase.euler2dcm","text":"function eular2dcm(euler::Union{SVector{3, <:Real}, Vector{<:Real}})::SMatrix{3, 3, <:Real}\n\ncalculate direction cosine matrix from the vector of z-y-x eular angles.\n\nArgument\n\neuler::Union{SVector{3, <:Real}, Vector{<:Real}}: each element represents the rotation with z, y, x axis, respectively\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase.euler2quaternion-Tuple{Union{Vector{var\"#s28\"} where var\"#s28\"<:Real, SVector{3, var\"#s29\"} where var\"#s29\"<:Real}}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase.euler2quaternion","text":"euler2quaternion(euler::Union{SVector{3, <:Real}, Vector{<:Real}})::SVector{4, Real}\n\ncalculates quaternion from z-y-x euler rotation angle\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase.initattitudedata-Tuple{Int64, InitData}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase.initattitudedata","text":"initattitudedata(datanum::Int, initialdata::InitData)\n\nInitialize the data container for the attitude dynamics\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase.quaternion2dcm-Tuple{Union{Vector{var\"#s28\"} where var\"#s28\"<:Real, SVector{4, var\"#s27\"} where var\"#s27\"<:Real}}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase.quaternion2dcm","text":"quaternion2dcm(q::Union{Vector{<:Real}, SVector{4, <:Real}})\n\ncalculates direction cosine matrix from quaternion\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase.quaternion2euler-Tuple{Union{Vector{var\"#s28\"} where var\"#s28\"<:Real, SVector{4, var\"#s27\"} where var\"#s27\"<:Real}}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase.quaternion2euler","text":"quaternion2euler(quaternion::Union{Vector{<:Real}, SVector{4, <:Real}})::SVector{3, <:Real}\n\ncalculates z-y-x euler rotation angle from quaternion\n\n\n\n\n\n","category":"method"},{"location":"dynamics/kinematics/#FlexibleSpacecraft.KinematicsBase.update_quaternion-Tuple{Any, Any, Any}","page":"Kinematics","title":"FlexibleSpacecraft.KinematicsBase.update_quaternion","text":"function update_quaternion(angularvelocity, quaternion, Tsampling)::SVector{4, <:Real}\n\ncalculate quaternion at next time step using 4th order Runge-Kutta method.\n\n\n\n\n\n","category":"method"},{"location":"simulation/simulation_core/#Core-implementation-of-the-simulation-feature","page":"Core","title":"Core implementation of the simulation feature","text":"","category":"section"},{"location":"simulation/simulation_core/","page":"Core","title":"Core","text":"CurrentModule = FlexibleSpacecraft","category":"page"},{"location":"simulation/simulation_core/","page":"Core","title":"Core","text":"This docs provides more detailed information on how FlexibleSpacecraft.jl executes simulation with provided submodules.","category":"page"},{"location":"simulation/simulation_core/#Simulation-interface","page":"Core","title":"Simulation interface","text":"","category":"section"},{"location":"simulation/simulation_core/","page":"Core","title":"Core","text":"Function runsimulation() is the top-most implementation of the simulation feature of FlexibleSpacecraft.jl.","category":"page"},{"location":"simulation/simulation_core/","page":"Core","title":"Core","text":"runsimulation","category":"page"},{"location":"simulation/simulation_core/#FlexibleSpacecraft.SimulationCore.runsimulation","page":"Core","title":"FlexibleSpacecraft.SimulationCore.runsimulation","text":"runsimulation(attitudemodel, initvalue::KinematicsBase.InitData, orbitinfo::OrbitBase.OrbitInfo, distconfig::DisturbanceConfig, simconfig::SimulationConfig)::Tuple\n\nFunction that runs simulation of the spacecraft attitude-structure coupling problem\n\nArguments\n\nattitudemodel: KinematicsBase dynamics model of the system\nstrmodel: Structural model of the flexible appendages\ninitvalue::InitData: Inital value of the simulation physical states\norbitinfo::OrbitBase.OrbitInfo: information and model definition of the orbital dynamics\ndistconfig::DisturbanceConfig: Disturbanve torque input configuration\nsimconfig::SimulationConfig: Simulation configuration ParameterSettingBase\n\nReturn value\n\nReturn is tuple of (time, attidata, orbitdata, strdata)\n\ntime: 1-D array of the time\nattidata: Struct of time trajectory of the physical amount states of the spacecraft system\norbitdata: Struct of the orbit state trajectory\nstrdata: Struct of the trajectory of the state of the flexible appendage\n\nUsage\n\n(time, attitudedata, orbitdata, strdata) = runsimulation(attitudemodel, strmodel, initvalue, orbitinfo, distconfig, simconfig)\n\n\n\n\n\n","category":"function"},{"location":"#FlexibleSpacecraft.jl-Documentation","page":"home","title":"FlexibleSpacecraft.jl Documentation","text":"","category":"section"},{"location":"","page":"home","title":"home","text":"(Image: Flexible spacecraft)","category":"page"},{"location":"","page":"home","title":"home","text":"FlexibleSpacecraft.jl is an Open Source Spacecraft Attitude-Structure Coupling Simulator and Evaluator developed in Julia Language, aiming to accelerate the development of the challenging space missions.","category":"page"},{"location":"","page":"home","title":"home","text":"Our focus is the coupling problem of structural vibration and spacecraft attitude. The structural and attitude control systems of spacecraft have been treated as separate problems. However, the coupled structure-attitude dynamic analysis will be necessary for the next generation spacecraft with extensive and flexible structures envisioned in the future. A simulator of the structure-attitude coupling system will make it possible to verify the problem efficiently and accelerate the development of the next-generation spacecraft.","category":"page"},{"location":"","page":"home","title":"home","text":"This project is quite new and under active development for open-source release.","category":"page"},{"location":"#Navigation-to-main-contents","page":"home","title":"Navigation to main contents","text":"","category":"section"},{"location":"","page":"home","title":"home","text":"Depth = 1","category":"page"},{"location":"docs-module/docs-DataContainers/#Data-container-and-its-handling-interfaces","page":"Data containers","title":"Data container and its handling interfaces","text":"","category":"section"},{"location":"docs-module/docs-DataContainers/#Frames","page":"Data containers","title":"Frames","text":"","category":"section"},{"location":"docs-module/docs-DataContainers/","page":"Data containers","title":"Data containers","text":"Frames is the module that handles data container for attitude frame representation. Please visit frames for notation and detailed explanation of the attitude frame representation","category":"page"},{"location":"docs-module/docs-DataContainers/","page":"Data containers","title":"Data containers","text":"Modules = [Frames]\nOrder   = [:type, :function]\nPages   = [\"Frames.jl\"]","category":"page"},{"location":"docs-module/docs-DataContainers/#FlexibleSpacecraft.Frames.Frame","page":"Data containers","title":"FlexibleSpacecraft.Frames.Frame","text":"struct Frame(x::Vector{Real}, y::Vector{Real}, z::Vector{Real})\n\nStruct of immutable vectors that express the coordinate frame of a certain state\n\n\n\n\n\n","category":"type"},{"location":"docs-module/docs-DataContainers/#Base.:*-Tuple{Union{Matrix{var\"#s1\"} where var\"#s1\"<:Real, SMatrix{3, 3, var\"#s2\", L} where {var\"#s2\"<:Real, L}}, Frame}","page":"Data containers","title":"Base.:*","text":"Base. :*(C::Union{SMatrix{3, 3, <:Real}, Matrix{<:Real}}, refframe::Frame)::Frame\n\nCalculate the transformed frame with transformation matrix C with respect to refframe\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-DataContainers/#Base.:--Tuple{Frame, Frame}","page":"Data containers","title":"Base.:-","text":"Base.:-(a::Frame, b::Frame)::Frame\n\nSubtraction operator for struct Frame.\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-DataContainers/#FlexibleSpacecraft.Frames.ECI2BodyFrame-Tuple{Any}","page":"Data containers","title":"FlexibleSpacecraft.Frames.ECI2BodyFrame","text":"ECI2BodyFrame(q)\n\nCalculate the transformation matrix from ECI frame to spacecraft body-fixed frame.\n\nArguments\n\nq: quaternion\n\nReturn\n\ntransformation_matrix: transformation matrix\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-DataContainers/#FlexibleSpacecraft.Frames.getframe-Tuple{Any, Any, Any}","page":"Data containers","title":"FlexibleSpacecraft.Frames.getframe","text":"getframe(time, sampling_period, coordinates::FrameArray)\n\nget a sampledframe::Frame matching with given time\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-DataContainers/#FlexibleSpacecraft.Frames.initframes-Tuple{Any, Frame}","page":"Data containers","title":"FlexibleSpacecraft.Frames.initframes","text":"initframes(datanum, initial_coordinate::Frame)\n\ninitialize data container of time-variant coordinate frame\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-DataContainers/#DataContainers","page":"Data containers","title":"DataContainers","text":"","category":"section"},{"location":"docs-module/docs-DataContainers/","page":"Data containers","title":"Data containers","text":"DataContainers.jl is the set of function that deals with the handling of all the necessary data container of the simulation. ","category":"page"},{"location":"docs-module/docs-DataContainers/","page":"Data containers","title":"Data containers","text":"note: Dispatch of the `::AbstractVector{<:AbstractVector}`\nThis submodule also includes the multiple dispatch for the ::AbstractVector{<:AbstractVector} type data container used for simulation. Please be noted that you may need to pay attention to this feature when you manually code your simulation using the ::AbstractVector{<:AbstractVector} type variables.","category":"page"},{"location":"docs-module/docs-DataContainers/","page":"Data containers","title":"Data containers","text":"Modules = [DataContainers]\nOrder   = [:type, :function]\nPages   = [\"DataContainers.jl\"]","category":"page"},{"location":"docs-module/docs-DataContainers/#Base.getindex-Tuple{AbstractVector{var\"#s3\"} where var\"#s3\"<:(AbstractVector{T} where T), Int64, Int64}","page":"Data containers","title":"Base.getindex","text":"Base.getindex(v::AbstractVector{<:AbstractVector}, r::Int, datarow::Int)\n\nget datarow-th element of the r-th vector in the v::AbstractVector{<:AbstractVector}\n\nExample\n\n> angularvelocity # ::AbstractVector{<:AbstractVector}\n10-element Vector{Vector{Int64}}:\n [1, 2, 3]\n [1, 2, 3]\n ⋮\n [1, 2, 3]\n [1, 2, 3]\n\n> angularvelocity[1]\n3-element Vector{Int64}: # get the first vector\n 1\n 2\n 3\n\n> angularvelocity[3, 2] # get the 2st element of the 3rd vector of the `angularvelocity`\n2\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-DataContainers/#Base.getindex-Tuple{AbstractVector{var\"#s3\"} where var\"#s3\"<:(AbstractVector{T} where T), Union{Colon, AbstractRange}, Int64}","page":"Data containers","title":"Base.getindex","text":"Base.getindex(v::AbstractVector{<:AbstractVector}, r::AbstractRange, datarow::Int)\n\nget a 1-D subset of the every datarow-th value of the inner vector v::AbstractVector{<:AbstractVector} within the specified range r::AbstractRange.\n\nExample\n\n> angularvelocity # ::AbstractVector{<:AbstractVector}\n10-element Vector{Vector{Int64}}:\n [1, 2, 3]\n [1, 2, 3]\n ⋮\n [1, 2, 3]\n [1, 2, 3]\n\n> angularvelocity[1]\n3-element Vector{Int64}: # get the first vector\n 1\n 2\n 3\n\n> angularvelocity[1:5, 1] # get the 1st element of the 1st to 5th vector of the\n 5-element Vector{Int64}:\n  1\n  1\n  1\n  1\n  1\n\n\n\n\n\n","category":"method"},{"location":"docs-module/docs-DataContainers/#FlexibleSpacecraft.DataContainers.getdataindex-Tuple{Tuple{Real, Real}, Real}","page":"Data containers","title":"FlexibleSpacecraft.DataContainers.getdataindex","text":"function getdataindex(timerange::Tuple{<:Real, <:Real}, samplingtime::Real)::Union{UnitRange{Int64}, Colon}\n\nreturns an index::::Union{UnitRange{Int64}, Colon} that corresponding to the given timerange::Tuple{<:Real, <:Real}\n\n\n\n\n\n","category":"method"}]
}
