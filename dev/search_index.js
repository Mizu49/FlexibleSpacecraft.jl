var documenterSearchIndex = {"docs":
[{"location":"development/developer's-guideline/#Developer's-Guideline","page":"Developer's Guideline","title":"Developer's Guideline","text":"","category":"section"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"We appreciate your contributions to our project! Please read the guideline for developers.","category":"page"},{"location":"development/developer's-guideline/#Branching-Model","page":"Developer's Guideline","title":"Branching Model","text":"","category":"section"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"We employ the following branching model. Please try to follow this!","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"Branch naming Description Branch off from: Merge back into:\nmain Latest stable release with version tag. None None\ndev-build Latest development build. Newly developed features are merged to this branch. main release-**** or main with --no-ff option\ndev-**** Feature development branch. Development of new feature should be on this branch. Contributors are encouraged to use this. development development with no-ff option\nrelease-**** Preparation for next release will be done in this branch. development main and develop with no-ff option\nhotfix-**** Bug fix in main main main and development","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"**** in branch naming is a short description of the development effort in that branch. It should be a lower camel case (e.g. dev-differentialEquation).","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"This branching model is inspired by Vincent Driessen's Branching Model","category":"page"},{"location":"development/developer's-guideline/#Style-Guide","page":"Developer's Guideline","title":"Style Guide","text":"","category":"section"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"Please follow the official style guide of JuliaLang!","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"In addition, we are using the following naming conventions.","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"****2####(): function that returns transformation matrix from **** to ####.  \neg. ECI2BodyFrame() returns transformation matrix from ECI frame to Spacecraft Body Fixed frame.\nC_****2####: variable that has transformation matrix from **** to ####.","category":"page"},{"location":"development/developer's-guideline/#Documentation","page":"Developer's Guideline","title":"Documentation","text":"","category":"section"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"Developers are encouraged to add docstrings in code. Especially when developing a new feature, be sure to explain it in detail and hopefully example code!","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"Documentation page is also good! Direct to /docs/src/ to add new page in the FlexibleSpacecraft.jl Docs!","category":"page"},{"location":"development/developer's-guideline/","page":"Developer's Guideline","title":"Developer's Guideline","text":"When using the information from external sources (like books and technical articles), be sure to add appropriate reference information. We recommend following the Reference Style and Format of the American Institute of Aeronautics and Astronautics (AIAA).","category":"page"},{"location":"DataContainers/docs-DataContainers/#Library-for-data-containers","page":"Data containers","title":"Library for data containers","text":"","category":"section"},{"location":"DataContainers/docs-DataContainers/","page":"Data containers","title":"Data containers","text":"Modules = [TimeLine]\nOrder   = [:type, :function]\nPages   = [\"TimeLine.jl\"]","category":"page"},{"location":"DataContainers/docs-DataContainers/#FlexibleSpacecraft.TimeLine.InitData","page":"Data containers","title":"FlexibleSpacecraft.TimeLine.InitData","text":"struct InitData\n\nStruct that consists of the initial state value of the time-variant physical amounts in simulation\n\n\n\n\n\n","category":"type"},{"location":"DataContainers/docs-DataContainers/#Base.getindex-Tuple{Vector{var\"#s6\"} where var\"#s6\"<:(StaticArrays.SVector{S, T} where {S, T}), Int64, Int64}","page":"Data containers","title":"Base.getindex","text":"Base.getindex(v::Vector{<:SVector}, r::Int, datarow::Int)\n\nget an element of the v<:SVector, used for custom data container for FlexibleSpacecraft.jl\n\n\n\n\n\n","category":"method"},{"location":"DataContainers/docs-DataContainers/#Base.getindex-Tuple{Vector{var\"#s6\"} where var\"#s6\"<:(StaticArrays.SVector{S, T} where {S, T}), Union{Colon, AbstractRange}, Int64}","page":"Data containers","title":"Base.getindex","text":"Base.getindex(v::Vector{<:SVector}, r::AbstractRange, datarow::Int)\n\nget a 1-D subset of the every datarow-th row of v::Vector{<:SVector} within r::AbstractRange, used for custom data container for FlexibleSpacecraft.jl\n\n\n\n\n\n","category":"method"},{"location":"DataContainers/docs-DataContainers/#FlexibleSpacecraft.TimeLine._initangularvelocity-Tuple{Any, StaticArrays.SVector{3, var\"#s6\"} where var\"#s6\"<:Real}","page":"Data containers","title":"FlexibleSpacecraft.TimeLine._initangularvelocity","text":"function _initangularvelocity(simdata_num, initital_value::Vector)\n\nInitialize array that contains time response of angular velocity\n\n\n\n\n\n","category":"method"},{"location":"DataContainers/docs-DataContainers/#FlexibleSpacecraft.TimeLine._initquaternion-Tuple{Any, StaticArrays.SVector{4, var\"#s6\"} where var\"#s6\"<:Real}","page":"Data containers","title":"FlexibleSpacecraft.TimeLine._initquaternion","text":"function _initquaternion(simdata_num, initial_value::Vector[4])\n\ninitialize array that contains time response of quaternion\n\n\n\n\n\n","category":"method"},{"location":"DataContainers/docs-DataContainers/#FlexibleSpacecraft.TimeLine.getdataindex-Tuple{Tuple{Real, Real}, Real}","page":"Data containers","title":"FlexibleSpacecraft.TimeLine.getdataindex","text":"function getdataindex(timerange::Tuple{<:Real, <:Real}, samplingtime::Real)::Union{UnitRange{Int64}, Colon}\n\nreturns an index::::Union{UnitRange{Int64}, Colon} that corresponding to the given timerange::Tuple{<:Real, <:Real}\n\n\n\n\n\n","category":"method"},{"location":"DataContainers/docs-DataContainers/#FlexibleSpacecraft.TimeLine.initsimulationdata-Tuple{Int64, InitData}","page":"Data containers","title":"FlexibleSpacecraft.TimeLine.initsimulationdata","text":"initsimulationdata(datanum::Int, initialdata::InitData)\n\nInitialize the data container for the attitude dynamics\n\n\n\n\n\n","category":"method"},{"location":"dynamics/frames/#Frames","page":"Frames","title":"Frames","text":"","category":"section"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"We need several coordinate frames to express spacecraft attitude dynamics.","category":"page"},{"location":"dynamics/frames/#ECI-(Earth-Centered-Inertial)-Frame","page":"Frames","title":"ECI (Earth-Centered Inertial) Frame","text":"","category":"section"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Inertial frame of our dynamics. Always fixed. Attitude dynamics are usually described based on this frame.","category":"page"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Origin: center of the Earth\nX-axis: direction of crossing between the equator and latitude 0 degrees at the initial state\nY-axis: direction of crossing between the equator and longitude +90 degrees at the initial state\nZ-axis: direction corresponding to the Earth's rotation axis","category":"page"},{"location":"dynamics/frames/#ECEF-(Earth-Centered-Earth-fixed)-Frame","page":"Frames","title":"ECEF (Earth-Centered Earth-fixed) Frame","text":"","category":"section"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Rotating coordinate frame according to the Earth's rotation. This frame is used mainly to express the ground equipment on the Earth.","category":"page"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Origin: center of the Earth\nX-axis: longitude 0 degrees on Greenwich meridian\nY-axis: longitude 90 degrees east\nZ-axis: direction corresponding to the Earth's north pole","category":"page"},{"location":"dynamics/frames/#LVLH-(Local-Vertical-Local-Horizontal)-frame","page":"Frames","title":"LVLH (Local Vertical Local Horizontal) frame","text":"","category":"section"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Referential frame of spacecraft on orbit. This frame describes the motion of spacecraft on orbit. And spacecraft attitude (Spacecraft-fixed frame) is expressed with respect to this frame.","category":"page"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Origin: center of the spacecraft\nX-axis: direction of travel on orbit (roll axis)\nY-axis: orthogonal direction to orbit plane (pitch axis)\nZ-axis: direction to the Earth (yaw axis)","category":"page"},{"location":"dynamics/frames/#Body-frame-(Spacecraft-fixed-frame)","page":"Frames","title":"Body frame (Spacecraft-fixed frame)","text":"","category":"section"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Frame that is fixed to the spacecraft body. Describing the attitude of spacecraft.","category":"page"},{"location":"dynamics/frames/","page":"Frames","title":"Frames","text":"Origin: center of the spacecraft or referential point on spacecraft\nX-axis: X-axis of the spacecraft body\nY-axis: Y-axis of the spacecraft body\nZ-axis: Z-axis of the spacecraft body","category":"page"},{"location":"development/environment/#Development-environment","page":"Environment","title":"Development environment","text":"","category":"section"},{"location":"development/environment/#Quick-Start-Guide","page":"Environment","title":"Quick Start Guide","text":"","category":"section"},{"location":"development/environment/#開発環境の用意","page":"Environment","title":"開発環境の用意","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"Docker Desktopをインストールする．\nVS Codeをインストールする．\nVS Codeに拡張機能 Remote Containers をインストールする．","category":"page"},{"location":"development/environment/#開発リポジトリの用意","page":"Environment","title":"開発リポジトリの用意","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"オリジナルのリポジトリをフォークする．\nローカルにフォークしたリポジトリをクローンする．\nVS Codeでローカルのリポジトリを開く．\nコマンドパレットから Remote-Containers: Open Folder in Container... を実行\nプロジェクトのフォルダがコンテナ内で開かれる．   初回ビルドの時は時間がかかる可能性がある．\nmain.jlを開く．\nコマンドパレットから Julia: Execute File in REPL を実行する．\nプログラムが動けば成功！","category":"page"},{"location":"development/environment/#Remote-Containersのインストール","page":"Environment","title":"Remote -Containersのインストール","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"Remote-Containersは，Dockerコンテナ内でVS Codeを開いて開発を行うことが出来るようにするVS Codeの拡張機能です．インストールは簡単です．","category":"page"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"VS CodeのEXTENSIONS: MARKETPLACEでremote-containersを検索する．\nRemote-Containersをインストールする","category":"page"},{"location":"development/environment/#開発環境の設定ファイル","page":"Environment","title":"開発環境の設定ファイル","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"FlexibleSpacecraft.jlのリポジトリをクローンしてください．ソースコード・ドキュメンテーションおよび開発環境の構築に必要なファイルがすべてダウンロードされます．","category":"page"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"開発環境はDockerコンテナの中に用意しています．.devcontainer/DockerfileにDocker Imageを作るためのDockerfileが用意されています．","category":"page"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"Dockerfileは，必要なアプリやパッケージと環境設定を記述したファイルです．このファイルを基にしてコンテナが作られます．\ndevcontainer.jsonは，VS codeの拡張機能Remote-Containersを使ってコンテナを立ち上げてVS codeで開発する際の設定などを書いておくファイルです．extensionsの部分に，リモート環境で使いたいVS Codeの拡張機能を書いておくと，VS Codeでコンテナを開くときにインストールされます．今回はJuliaの拡張機能を追加します．ほかにリモート環境で使いたい拡張機能を書いておけば，インストールされます．このファイルに書く内容は，VS Codeで拡張機能のページを開いたとき，下の図の赤枠の部分に表示されます．","category":"page"},{"location":"development/environment/#Reference","page":"Environment","title":"Reference","text":"","category":"section"},{"location":"development/environment/","page":"Environment","title":"Environment","text":"Developing inside a Container","category":"page"},{"location":"#FlexibleSpacecraft.jl-Documentation","page":"home","title":"FlexibleSpacecraft.jl Documentation","text":"","category":"section"},{"location":"","page":"home","title":"home","text":"FlexibleSpacecraft.jl is an Open Source Spacecraft Attitude-Structure Coupling Simulator developed in Julia Language.","category":"page"},{"location":"","page":"home","title":"home","text":"Our focus is the coupling problem of structural vibration and spacecraft attitude. The structural and attitude control systems of spacecraft have been treated as separate problems. However, the coupled structure-attitude dynamic analysis will be necessary for the next generation spacecraft with extensive and flexible structures envisioned in the future. A simulator of the structure-attitude coupling system will make it possible to verify the problem efficiently and accelerate the development of the next-generation spacecraft.","category":"page"},{"location":"","page":"home","title":"home","text":"This project is quite new and under active development for open-source release.","category":"page"},{"location":"example/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"This documentation page is an example and quick start guide for the use of FlexibleSpacecraft.jl","category":"page"},{"location":"example/#Example-script-and-files","page":"Example","title":"Example script and files","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Example script main.jl is found in the /test directory. Configuration and parameter setting file is preferred for the simulation, and these files should be in YAML format. Detailed formatting for the parameter settings is found in the Parameter configurations.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"You need the following files:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"main.jl: the main script\norbit.yml: main configuration for orbital parameters\nspacecraft.yml: parameter settings for spacecraft configuration","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"These files are found on the test directory in the GitHub repository. Run the main.jl, and you will get the simulation result. By default, the software provides the data set of simulation results and plots of those data. It also gives you a GIF animation of the spacecraft attitude.","category":"page"},{"location":"example/#Description-of-the-main.jl-and-UI","page":"Example","title":"Description of the main.jl and UI","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"This section illustrates the user interface for running the attitude-structure coupling simulation with FlexibleSpacecraft.jl. This description is based on the contents in main.jl.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Firstly, you need to load the module FlexibleSpacecraft into your namespace.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"using FlexibleSpacecraft","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Then you need to configure the simulation. ","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"# Sampling period of simulation (second)\nTsampling = 1e-2\n# Time length of simulation (second)\nsimulation_time = 1000\n\n# Initialize the simulation configurations\n(simconfig, ECI_frame) = initsimulation(simulation_time, Tsampling)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Then you need to define the dynamics model of spacecraft and orbit. And other parameters for simulation are defined at this point.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"# Set the dynamics model\nmodel = setdynamicsmodel(\"./test/spacecraft.yml\",)\n\n# define a orbit info\norbitinfo = initorbitinfo(\"./test/orbit.yml\", ECI_frame)\n\n# Set disturbance torque\ndistconfig = DisturbanceConfig(gravitygradient = true)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Next, initialize the time-varying states and give all the data to the simulation API.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"# Initialize data array\ninitvalue = TimeLine.InitData(\n    [0, 0, 0, 1],\n    [0, 0, 0],\n    ECI_frame\n)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Then you are all set! Just run runsimulation(). This function is the high-level user interface for simulation. ","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"# run simulation\nprintln(\"Begin simulation!\")\n@time (time, simdata, orbitdata) = runsimulation(model, ECI_frame, initvalue, orbitinfo, distconfig, simconfig)\nprintln(\"Completed!\")","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Congrats! You have successfully run your simulation! Let's process your simulation data. We have covered that for you. Run quaternion_constraint() to check your result is physically making sense.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"@test Evaluation.quaternion_constraint(simdata.quaternion)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Our visualization feature helps you to process your simulation effectively.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"fig1 = PlotRecipe.angularvelocities(time, simdata.angularvelocity)\n# fig1 = PlotRecipe.angularvelocities(time, simdata.angularvelocity, timerange = (0, 10))\ndisplay(fig1)\n\nfig2 = PlotRecipe.quaternions(time, simdata.quaternion)\ndisplay(fig2)\n\n# Plot of the body frame with respect to ECI frame\nfig3 = PlotRecipe.framegif(time, ECI_frame, simdata.bodyframe, Tgif = 20, FPS = 8)\ndisplay(fig3)","category":"page"}]
}
